(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const initGame = require('./resources/engine.js').initGame,
    player = require('./players/player.js'),
    allEnemies = require('./players/enemy.js').allEnemies,
    utils = require('./utils/utils.js'),
    gameProcess = require('./players/gameProcess.js');



var startPlayButton = document.querySelectorAll('.modalStart__button')[0],
    choosePlayerEl = document.querySelectorAll('#modalPlayers')[0],
    restartButton = document.querySelectorAll('.modalGameEnd__restartButton')[0];




// This listner for choosing player body. It sets choosen image 
// for player and set player property playerActive to true.
choosePlayerEl.addEventListener('click', function(e) {
    if (!player.playerBody) {
        utils.toggleClass(e.target, 'active');
    } else {
        utils.toggleClass(player.playerBody, 'active');
        utils.toggleClass(e.target, 'active');
    }
    gameProcess.choosePlayer(e, player);
    player.activePlayer();
});




// On click hide modal start, set gameInProcess to `true`
// Initialize the game and delete CSS class active from modal window with players
startPlayButton.addEventListener('click', function(e) {
    if (player.getPlayerActivity()) {
        gameProcess.modalStartVisibility();
        gameProcess.setGameInProcess(true);
        gameProcess.gameInfoVisibility();
        initGame();
        utils.toggleClass(document.querySelectorAll('#modalPlayers .active')[0], 'active');
    }
});


// Restart button reset all properties for enemies and player to default.
// Close the ModalEnd and open start modal window
restartButton.addEventListener('click', function(e) {
    player.resetAllValues();
    allEnemies.forEach(function(enemy) {
        enemy.resetAllValues(-100);
    });

    gameProcess.gameEndModal();
    gameProcess.modalStartVisibility();
});

// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function(e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
    };

    player.handleInput(allowedKeys[e.keyCode]);
});
},{"./players/enemy.js":2,"./players/gameProcess.js":3,"./players/player.js":4,"./resources/engine.js":5,"./utils/utils.js":7}],2:[function(require,module,exports){
const Resources = require('../resources/resources.js'),
    utils = require('../utils/utils.js');

// Enemies our player must avoid
var Enemy = function(x, y) {
    // Variables applied to each of our instances go here,
    // we've provided one for you to get started

    // The image/sprite for our enemies, this uses
    // a helper we've provided to easily load images
    this.sprite = 'images/enemy-bug.png';
    this.x = x;
    this.y = y;
    this.speed = undefined;
    this.level = 1;
};



// Update the enemy's position, required method for game
// Parameter: dt, a time delta between ticks
Enemy.prototype.update = function(dt) {
    // You should multiply any movement by the dt parameter
    // which will ensure the game runs at the same speed for
    // all computers.
    if (!this.speed) {
        this.setSpeed();
    }
    
    this.x = this.x + (dt * this.speed);

    if (this.x > 101 * 6) {
        this.x = -100;
        this.setSpeed();
    }
};



// Draw the enemy on the screen, required method for game
Enemy.prototype.render = function(dt) {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};


//Return current enemy position
Enemy.prototype.getPosition = function() {
    return {
        x: this.x,
        y: this.y
    };
};



// Increment difficulty level
Enemy.prototype.incrementLevel = function () {
    this.level += 1;
};



// Increment difficulty level
Enemy.prototype.decrementLevel = function () {
    this.level -= 1;
};



// Get difficulty level
Enemy.prototype.getLevel = function(){
    return this.level;
};

// Reset all values
// @param {Number} x Horizontal start position for all enemies
Enemy.prototype.resetAllValues = function(x){
    this.x = x;
    this.speed = undefined;
    this.level = 1;
};

// Set speed depends on difficulty level
Enemy.prototype.setSpeed = function() {
    let random = Math.random().toFixed(1) * 10;
    if(this.level === 1){
        random = random >= 5 ? random / 2 : random;
    } else if(this.level === 2){
        random = random >= 5 ? random : random * 2;
    } else if (this.level === 3){
        random = random >= 5 ? random * 3 : random * 4;
    } else {
        random = random >= 5 ? random * 5 : random * 6;
    }
    this.speed = Math.round(random * 50);
};


// Defined enemies
var enemy1 = new Enemy(-100, 53);
var enemy2 = new Enemy(-100, 136);
var enemy3 = new Enemy(-100, 219);


var allEnemies = [enemy1, enemy2, enemy3];


module.exports = {
    allEnemies: allEnemies
};
},{"../resources/resources.js":6,"../utils/utils.js":7}],3:[function(require,module,exports){
const Resources = require('../resources/resources.js'),
    utils = require('../utils/utils.js');

var allPlayers = [
        // Player sources
        'images/char-boy.png',
        'images/char-cat-girl.png',
        'images/char-horn-girl.png',
        'images/char-pink-girl.png',
        'images/char-princess-girl.png'
    ],
    allKeysForPlayers = [
        'Boy',
        'Cat',
        'Horn',
        'Pink',
        'Princess'
    ];

// GameProcess class manage some of game process like show and hide modal windows,
// game status to stop and reset the game and other

function GameProcess() {
    this.gemGreen = 'images/Gem_Green.png';
    this.gemBlue = 'images/Gem_Blue.png';
    this.gemOrange = 'images/Gem_Orange.png';

    this.gameInProcess = false;
}


// Check, if this property exist in GameProcess class
GameProcess.prototype.getProperty = function(propertyName) {
    if (this && this[propertyName]) {
        return this[propertyName];
    } else {
        console.warn(`Sorry ${propertyName} or "this" object doesn't exist.`);
    }
};


// Set the game to given process status
// @param {Boolean} inProcess If `false` the game will be stoped
GameProcess.prototype.setGameInProcess = function(inProcess) {
    this.gameInProcess = inProcess;
};

// Return status of game process
GameProcess.prototype.getGameInProcess = function() {
    return this.gameInProcess;
};

// Hide the game end modal window if it visible, and show if not visible
GameProcess.prototype.gameEndModal = function(result) {
    gameEndWindow = document.querySelectorAll('.modalGameEnd')[0];

    if (gameEndWindow.className.indexOf('active') > -1) {
        document.querySelectorAll('.modalGameEnd .resultText')[0].textContent = '';
        utils.toggleClass(gameEndWindow, 'active');
    } else {
        document.querySelectorAll('.modalGameEnd .resultText')[0].textContent = result;
        utils.toggleClass(gameEndWindow, 'active');
    }
};

// Hide the game Info window if it visible, and show if not visible
GameProcess.prototype.gameInfoVisibility = function() {
    let gameInfoEl = document.querySelectorAll('#gameInfo')[0];

    utils.toggleClass(gameInfoEl, 'active');
};

// Hide the game start window if it visible, and show if not visible
GameProcess.prototype.modalStartVisibility = function() {
    let modalWindow = document.querySelectorAll('.modalStart')[0];

    utils.toggleClass(modalWindow, 'active');
};

// Choose player on click call {#Player.setPlayer} method
GameProcess.prototype.choosePlayer = function(e, playerCmp) {
    var playerData = e.target.dataset,
        i, len;

    for (i = 0, len = allPlayers.length; i < len; i++) {
        if (allPlayers[i].indexOf(playerData.bodyType.toLowerCase()) > -1) {
            playerCmp.setPlayer(Resources.get(allPlayers[i]));
        }
    }
};

// Clear the game board
GameProcess.prototype.clearGameBoard = function(canvas) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
};


// Create and add all availible player images to the start modal window
GameProcess.prototype.addPlayersToModalStart = function() {
    var modalPlayers = document.getElementById('modalPlayers'),
        playerContainer, playerContainerText, player, i, j, len, lenJ;

    for (i = 0, len = allPlayers.length; i < len; i++) {
        player = Resources.get(allPlayers[i]);
        playerContainer = utils.createEl('div');
        playerContainerText = utils.createEl('span');
        playerContainer.className = 'playerContainer';

        for (j = 0, lenJ = allKeysForPlayers.length; j < lenJ; j++) {
            if (allPlayers[i].indexOf(allKeysForPlayers[j].toLowerCase()) > -1) {
                player.dataset.bodyType = allKeysForPlayers[j];
                playerContainerText.textContent = allKeysForPlayers[j];
                playerContainer.appendChild(player);
                playerContainer.appendChild(playerContainerText);
            }
        }
        modalPlayers.appendChild(playerContainer);
    }
};

// Update current game information like score, player lives and speed level
GameProcess.prototype.update = function(player, enemy) {
    document.querySelectorAll('#gameInfo .scoreFieldValue')[0].textContent = player.getScore();
    document.querySelectorAll('#gameInfo .livesFieldValue')[0].textContent = player.getLives();
    document.querySelectorAll('#gameInfo .enemySpeedValue')[0].textContent = enemy.getLevel();
};

let gameProcess = new GameProcess();

module.exports = gameProcess;
},{"../resources/resources.js":6,"../utils/utils.js":7}],4:[function(require,module,exports){
const Resources = require('../resources/resources.js'),
    utils = require('../utils/utils.js'),
    gameProcess = require('./gameProcess.js');

// Now write your own player class
// This class requires an update(), render() and
// a handleInput() method.
var Player = function() {
    this.playerBody = undefined;
    this.playerIsActive = false;
    this.lives = 5;
    this.score = 0;
    this.maxScore = 15;
};


// Add to Playerbody(image) and set coordinates for player start
Player.prototype.setPlayer = function(player) {
    this.playerBody = player;
    this.x = 101 * 2;
    this.y = 83 * 5 - 32;
};

// Reduce player live and return player to start
Player.prototype.fail = function() {
    this.lives -= 1;
    if (this.lives > 0) {
        this.returnToStart();
    }
};

// Add points to score and return player to start
Player.prototype.win = function() {
    if(this.score < this.maxScore){
        this.returnToStart();
    }
};

// return player to start
Player.prototype.returnToStart = function() {
        this.x = 101 * 2;
        this.y = 83 * 5 - 32;
};

// Add one point to score
Player.prototype.incrementScore = function() {
    this.score += 1;
};

// Set player active
// This property blocks the start button till player body(image) will be set
Player.prototype.activePlayer = function() {
    this.playerIsActive = true;
};

// Return true if player body exist and 
Player.prototype.getPlayerActivity = function() {
    return this.playerIsActive;
};


// Return player's lives
Player.prototype.getLives = function() {
    return this.lives;
};

// Return player's score
Player.prototype.getScore = function() {
    return this.score;
};

// Return current player position
Player.prototype.getPosition = function() {
    return {
        x: this.x,
        y: this.y
    };
};

// Set default values for all properties in class
Player.prototype.resetAllValues = function() {
   this.playerBody = undefined;
    this.playerIsActive = false;
    this.lives = 5;
    this.score = 0;
    this.maxScore = 15;
};


// Manage player moves
Player.prototype.handleInput = function(code) {
    switch (code) {
        case 'up': // if (x === 'value1')
            if (this.y > -84 && (this.y - 83) > -84) {
                this.y = this.y - 83;
            }
            break;
        case 'down':
            if (this.y < 83 * 5 && (this.y + 83) < 83 * 5) {
                this.y = this.y + 83;
            }
            break;
        case 'right':
            if (this.x > -1 && (this.x + 101) < 101 * 5) {
                this.x = this.x + 101;
            }
            break;
        case 'left':
            if (this.x < 101 * 5 && (this.x - 101) > -1) {
                this.x = this.x - 101;
            }
            break;
    }

};

// Update player info and if player is on the finish water line, add to score 1 point
// return the player on start and increase the speed of enemies
Player.prototype.update = function(enemies) {
    if (this.y < 0) {
        this.returnToStart();
        this.incrementScore();
        enemies.forEach(function(enemy) {
            enemy.incrementLevel();
        });
    }
};

// Draw the player on the screen, required method for game
Player.prototype.render = function(code) {
    ctx.drawImage(this.playerBody, this.x, this.y);
};

var player = new Player();


module.exports = player;
},{"../resources/resources.js":6,"../utils/utils.js":7,"./gameProcess.js":3}],5:[function(require,module,exports){
/* Engine.js
 * This file provides the game loop functionality (update entities and render),
 * draws the initial game board on the screen, and then calls the update and
 * render methods on your player and enemy objects (defined in your app.js).
 *
 * A game engine works by drawing the entire game screen over and over, kind of
 * like a flipbook you may have created as a kid. When your player moves across
 * the screen, it may look like just that image/character is moving or being
 * drawn but that is not the case. What's really happening is the entire "scene"
 * is being drawn over and over, presenting the illusion of animation.
 *
 * This engine makes the canvas' context (ctx) object globally available to make
 * writing app.js a little simpler to work with.
 */


const Resources = require('./resources.js'),
    enemyCmp = require('../players/enemy.js'),
    playerCmp = require('../players/player.js'),
    gameProcess = require('../players/gameProcess.js'),
    utils = require('../utils/utils.js');

/* Predefine the variables we'll be using within this scope,
 * create the canvas element, grab the 2D context for that canvas
 * set the canvas element's height/width and add it to the DOM.
 */

var doc = window.document,
    win = window.window,
    canvas = utils.createEl('canvas'),
    ctx = canvas.getContext('2d'),
    mainGameContainer = document.getElementById('mainGameContainer'),
    gameInfoEl = document.getElementById('gameInfo'),
    lastTime, allEnemies;

canvas.width = 505;
canvas.height = 606;
mainGameContainer.insertBefore(canvas, gameInfoEl);

/* This function serves as the kickoff point for the game loop itself
 * and handles properly calling the update and render methods.
 */
function main() {
    /* Get our time delta information which is required if your game
     * requires smooth animation. Because everyone's computer processes
     * instructions at different speeds we need a constant value that
     * would be the same for everyone (regardless of how fast their
     * computer is) - hurray time!
     */
    var now = Date.now(),
        dt = (now - lastTime) / 1000.0;

    /* Call our update/render functions, pass along the time delta to
     * our update function since it may be used for smooth animation.
     */
    update(dt);
    render();

    /* Set our lastTime variable which is used to determine the time delta
     * for the next time this function is called.
     */
    lastTime = now;

    /* Use the browser's requestAnimationFrame function to call this
     * function again as soon as the browser is able to draw another frame.
     */
    if (gameProcess.getGameInProcess()) {
        win.requestAnimationFrame(main);
    }
}

/* This function does some initial setup that should only occur once,
 * particularly setting the lastTime variable that is required for the
 * game loop.
 */
function init() {
    lastTime = Date.now();
    main();
}

/* This function is called by main (our game loop) and itself calls all
 * of the functions which may need to update entity's data. Based on how
 * you implement your collision detection (when two entities occupy the
 * same space, for instance when your character should die), you may find
 * the need to add an additional function call here. For now, we've left
 * it commented out - you may or may not want to implement this
 * functionality this way (you could just implement collision detection
 * on the entities themselves within your app.js file).
 */
function update(dt) {
    enemyCmp.allEnemies.forEach(function(enemy) {
        comparePositions(enemy, playerCmp);
    });
    updateEntities(dt);
}

/* This is called by the update function and loops through all of the
 * objects within your allEnemies array as defined in app.js and calls
 * their update() methods. It will then call the update function for your
 * player object. These update methods should focus purely on updating
 * the data/properties related to the object. Do your drawing in your
 * render methods.
 */
function updateEntities(dt) {
    enemyCmp.allEnemies.forEach(function(enemy) {
        enemy.update(dt);
    });

    playerCmp.update(enemyCmp.allEnemies);

    if (playerCmp.getScore() >= 15) {
        reset('You win!');
    } else if (playerCmp.getLives() <= 0) {
        reset('Sorry, you lose!');
    }
}

/* This function initially draws the "game level", it will then call
 * the renderEntities function. Remember, this function is called every
 * game tick (or loop of the game engine) because that's how games work -
 * they are flipbooks creating the illusion of animation but in reality
 * they are just drawing the entire screen over and over.
 */
function render() {
    /* This array holds the relative URL to the image used
     * for that particular row of the game level.
     */
    var rowImages = [
            'images/water-block.png', // Top row is water
            'images/stone-block.png', // Row 1 of 3 of stone
            'images/stone-block.png', // Row 2 of 3 of stone
            'images/stone-block.png', // Row 3 of 3 of stone
            'images/grass-block.png', // Row 1 of 2 of grass
            'images/grass-block.png' // Row 2 of 2 of grass
        ],
        numRows = 6,
        numCols = 5,
        row, col;

    // Before drawing, clear existing canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    /* Loop through the number of rows and columns we've defined above
     * and, using the rowImages array, draw the correct image for that
     * portion of the "grid"
     */
    for (row = 0; row < numRows; row++) {
        for (col = 0; col < numCols; col++) {
            /* The drawImage function of the canvas' context element
             * requires 3 parameters: the image to draw, the x coordinate
             * to start drawing and the y coordinate to start drawing.
             * We're using our Resources helpers to refer to our images
             * so that we get the benefits of caching these images, since
             * we're using them over and over.
             */
            ctx.drawImage(Resources.get(rowImages[row]), col * 101, row * 83);
        }
    }

    renderEntities();
    gameProcess.update(playerCmp, enemyCmp.allEnemies[0]);
}

/* This function is called by the render function and is called on each game
 * tick. Its purpose is to then call the render functions you have defined
 * on your enemy and player entities within app.js
 */
function renderEntities() {
    /* Loop through all of the objects within the allEnemies array and call
     * the render function you have defined.
     */
    enemyCmp.allEnemies.forEach(function(enemy) {
        enemy.render();
    });

    playerCmp.render();
}


// Compare positions of enemies and player
// If player meet enemy than will be called player method {#Player.fail}
function comparePositions(enemy, player) {
    let playerPos = player.getPosition(),
        enemyPos = enemy.getPosition(),
        playerLeft, playerRight, playerTop,
        enemyLeft, enemyRight, enemyBottom,
        compareLevelHigh;

    playerLeft = player.x;
    playerRight = player.x + 101;
    playerTop = player.y + 70;

    enemyLeft = enemyPos.x + 40;
    enemyRight = enemyPos.x + 61;
    enemyBottom = enemyPos.y + 171;
    enemyTop = enemyPos.y + 70;

    compareLevelHigh = Math.ceil(playerTop / 10) === Math.ceil(enemyTop / 10);

    if (playerLeft < enemyRight && playerRight > enemyLeft && compareLevelHigh) {
        playerCmp.fail();
    }
}

/* This function does nothing but it could have been a good place to
 * handle game reset states - maybe a new game menu or a game over screen
 * those sorts of things. It's only called once by the init() method.
 */
function reset(result) {
    gameProcess.setGameInProcess(false);
    gameProcess.clearGameBoard(canvas);
    gameProcess.gameInfoVisibility();
    gameProcess.gameEndModal(result);
}

/* Go ahead and load all of the images we know we're going to need to
 * draw our game level. Then set init as the callback method, so that when
 * all of these images are properly loaded our game will start.
 */
Resources.load([
    // Map sources
    'images/stone-block.png',
    'images/water-block.png',
    'images/grass-block.png',
    // Enemy source
    'images/enemy-bug.png',
    // Bonuses sources
    'images/Gem_Blue.png',
    'images/Gem_Green.png',
    'images/Gem_Orange.png',
    // Player sources
    'images/char-boy.png',
    'images/char-cat-girl.png',
    'images/char-horn-girl.png',
    'images/char-pink-girl.png',
    'images/char-princess-girl.png'
]);
// Resources.onReady(init);
Resources.onReady(gameProcess.addPlayersToModalStart);

/* Assign the canvas' context object to the global variable (the window
 * object when run in a browser) so that developers can use it more easily
 * from within their app.js files.
 */
window.ctx = ctx;

module.exports = {
    initGame: init,
    resetGame: reset,
    main: main
};
},{"../players/enemy.js":2,"../players/gameProcess.js":3,"../players/player.js":4,"../utils/utils.js":7,"./resources.js":6}],6:[function(require,module,exports){
/* Resources.js
 * This is simply an image loading utility. It eases the process of loading
 * image files so that they can be used within your game. It also includes
 * a simple "caching" layer so it will reuse cached images if you attempt
 * to load the same image multiple times.
 */
var Resources = (function() {
    var resourceCache = {};
    var readyCallbacks = [];

    /* This is the publicly accessible image loading function. It accepts
     * an array of strings pointing to image files or a string for a single
     * image. It will then call our private image loading function accordingly.
     */
    function load(urlOrArr) {
        if(urlOrArr instanceof Array) {
            /* If the developer passed in an array of images
             * loop through each value and call our image
             * loader on that image file
             */
            urlOrArr.forEach(function(url) {
                _load(url);
            });
        } else {
            /* The developer did not pass an array to this function,
             * assume the value is a string and call our image loader
             * directly.
             */
            _load(urlOrArr);
        }
    }

    /* This is our private image loader function, it is
     * called by the public image loader function.
     */
    function _load(url) {
        if(resourceCache[url]) {
            /* If this URL has been previously loaded it will exist within
             * our resourceCache array. Just return that image rather than
             * re-loading the image.
             */
            return resourceCache[url];
        } else {
            /* This URL has not been previously loaded and is not present
             * within our cache; we'll need to load this image.
             */
            var img = new Image();
            img.onload = function() {
                /* Once our image has properly loaded, add it to our cache
                 * so that we can simply return this image if the developer
                 * attempts to load this file in the future.
                 */
                resourceCache[url] = img;

                /* Once the image is actually loaded and properly cached,
                 * call all of the onReady() callbacks we have defined.
                 */
                if(isReady()) {
                    readyCallbacks.forEach(function(func) { 
                        func.call(); 
                    });
                }
            };

            /* Set the initial cache value to false, this will change when
             * the image's onload event handler is called. Finally, point
             * the image's src attribute to the passed in URL.
             */
            resourceCache[url] = false;
            img.src = url;
        }
    }

    /* This is used by developers to grab references to images they know
     * have been previously loaded. If an image is cached, this functions
     * the same as calling load() on that URL.
     */
    function get(url) {
        return resourceCache[url];
    }

    /* This function determines if all of the images that have been requested
     * for loading have in fact been properly loaded.
     */
    function isReady() {
        var ready = true;
        for(var k in resourceCache) {
            if(resourceCache.hasOwnProperty(k) &&
               !resourceCache[k]) {
                ready = false;
            }
        }
        return ready;
    }

    /* This function will add a function to the callback stack that is called
     * when all requested images are properly loaded.
     */
    function onReady(func) {
        readyCallbacks.push(func);
    }

    /* This object defines the publicly accessible functions available to
     * developers by creating a global Resources object.
     */
    return {
        load: load,
        get: get,
        onReady: onReady,
        isReady: isReady
    };
})();

module.exports = Resources;

},{}],7:[function(require,module,exports){
/**
 * @description Toggle given class using cross browser property ClassName.
 * @param {Object} element DOMElement to toggle class.
 * @param {String} className Class name that should be toggled.
 */
// toggleClass function from https://stackoverflow.com/questions/18880890/how-do-i-toggle-an-elements-class-in-pure-javascript
function toggleClass(element, className) {
    if (!element || !className) {
        return;
    }

    var classString = element.className,
        nameIndex = classString.indexOf(className);
    if (nameIndex == -1) {
        classString += ' ' + className;
    } else {
        classString = classString.substr(0, nameIndex) + classString.substr(nameIndex + className.length);
    }
    element.className = classString;
}

// Shortcut for create element
function createEl(tag){
    return document.createElement(tag);
}

module.exports = {
    toggleClass: toggleClass,
    createEl: createEl
};
},{}]},{},[1,2,3,4,5,6,7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
