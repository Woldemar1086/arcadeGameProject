{"version":3,"sources":["arcadegame.min.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Resources","Enemy","this","sprite","x","y","prototype","update","dt","render","ctx","drawImage","get","speed","console","log","Player","playerBody","undefined","playerIsActive","setPlayer","player","activePlayer","inactivePlayer","getPlayerActivity","handleInput","window","playerComponent","document","addEventListener","37","38","39","40","keyCode","allEnemies","./resources.js","2","modalActions","doc","win","canvas","createElement","getContext","main","now","Date","row","col","rowImages","clearRect","width","height","requestAnimationFrame","reset","body","appendChild","load","onReady","addPlayersToModalStart","initGame","resetGame","./startGame.js","3","closeModalStart","choosePlayer","startPlayButton","querySelectorAll","choosePlayerEl","./app.js","./engine.js","4","resourceCache","readyCallbacks","_load","url","img","Image","onload","isReady","forEach","func","src","ready","k","hasOwnProperty","urlOrArr","Array","push","5","utils","allPlayers","allKeysForPlayers","modalWindow","playerContainer","j","len","lenJ","modalPlayers","getElementById","playerContainerText","className","indexOf","toLowerCase","dataset","bodyType","textContent","toggleClass","playerData","target","./utils/utils.js","6","element","classString","nameIndex","substr"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nconst Resources = require('./resources.js');\r\n\r\n// Enemies our player must avoid\r\nvar Enemy = function() {\r\n    // Variables applied to each of our instances go here,\r\n    // we've provided one for you to get started\r\n\r\n    // The image/sprite for our enemies, this uses\r\n    // a helper we've provided to easily load images\r\n    this.sprite = 'images/enemy-bug.png';\r\n    this.x = null;\r\n    this.y = null;\r\n};\r\n\r\n// Update the enemy's position, required method for game\r\n// Parameter: dt, a time delta between ticks\r\nEnemy.prototype.update = function(dt) {\r\n    // You should multiply any movement by the dt parameter\r\n    // which will ensure the game runs at the same speed for\r\n    // all computers.\r\n    this.render(dt);\r\n};\r\n\r\n// Draw the enemy on the screen, required method for game\r\nEnemy.prototype.render = function() {\r\n    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);\r\n};\r\n\r\nEnemy.prototype.speed = function() {\r\n    console.log(speed);\r\n};\r\n\r\n\r\n// Now write your own player class\r\n// This class requires an update(), render() and\r\n// a handleInput() method.\r\n\r\nvar Player = function () {\r\n\tthis.playerBody = undefined;\r\n    this.playerIsActive = false;\r\n\r\n};\r\n\r\nPlayer.prototype.setPlayer = function (player) {\r\n\tthis.playerBody = player;\r\n    this.x = null;\r\n    this.y = null;\r\n    ctx.drawImage(Resources.get(this.playerBody), 101, 83);\r\n};\r\n\r\nPlayer.prototype.activePlayer = function () {\r\n    this.playerIsActive = true;\r\n};\r\n\r\nPlayer.prototype.inactivePlayer = function () {\r\n    this.playerIsActive = false;\r\n};\r\n\r\nPlayer.prototype.getPlayerActivity = function () {\r\n    return this.playerIsActive;\r\n};\r\n\r\nPlayer.prototype.handleInput = function (code) {\r\n\tconsole.log(code);\r\n};\r\n\r\nPlayer.prototype.update = function (code) {\r\n\tconsole.log(code);\r\n};\r\n\r\nvar player = new Player();\r\n\r\nwindow.playerComponent = player;\r\n// Now instantiate your objects.\r\n// Place all enemy objects in an array called allEnemies\r\n// Place the player object in a variable called player\r\n\r\nvar allEnemies = [];\r\n\r\n\r\n// This listens for key presses and sends the keys to your\r\n// Player.handleInput() method. You don't need to modify this.\r\ndocument.addEventListener('keyup', function(e) {\r\n    var allowedKeys = {\r\n        37: 'left',\r\n        38: 'up',\r\n        39: 'right',\r\n        40: 'down'\r\n    };\r\n\r\n    player.handleInput(allowedKeys[e.keyCode]);\r\n});\r\n\r\nmodule.exports = {\r\n    player: player,\r\n    allEnemies: allEnemies\r\n};\r\n\n},{\"./resources.js\":4}],2:[function(require,module,exports){\n/* Engine.js\r\n * This file provides the game loop functionality (update entities and render),\r\n * draws the initial game board on the screen, and then calls the update and\r\n * render methods on your player and enemy objects (defined in your app.js).\r\n *\r\n * A game engine works by drawing the entire game screen over and over, kind of\r\n * like a flipbook you may have created as a kid. When your player moves across\r\n * the screen, it may look like just that image/character is moving or being\r\n * drawn but that is not the case. What's really happening is the entire \"scene\"\r\n * is being drawn over and over, presenting the illusion of animation.\r\n *\r\n * This engine makes the canvas' context (ctx) object globally available to make\r\n * writing app.js a little simpler to work with.\r\n */\r\n\r\n\r\nconst Resources = require('./resources.js'),\r\n    modalActions = require('./startGame.js');\r\n\r\n/* Predefine the variables we'll be using within this scope,\r\n * create the canvas element, grab the 2D context for that canvas\r\n * set the canvas element's height/width and add it to the DOM.\r\n */\r\n\r\nvar doc = window.document,\r\n    win = window.window,\r\n    canvas = doc.createElement('canvas'),\r\n    ctx = canvas.getContext('2d'),\r\n    lastTime, allEnemies;\r\n\r\ncanvas.width = 505;\r\ncanvas.height = 606;\r\ndoc.body.appendChild(canvas);\r\n\r\n/* This function serves as the kickoff point for the game loop itself\r\n * and handles properly calling the update and render methods.\r\n */\r\nfunction main() {\r\n    /* Get our time delta information which is required if your game\r\n     * requires smooth animation. Because everyone's computer processes\r\n     * instructions at different speeds we need a constant value that\r\n     * would be the same for everyone (regardless of how fast their\r\n     * computer is) - hurray time!\r\n     */\r\n    var now = Date.now(),\r\n        dt = (now - lastTime) / 1000.0;\r\n\r\n    /* Call our update/render functions, pass along the time delta to\r\n     * our update function since it may be used for smooth animation.\r\n     */\r\n    update(dt);\r\n    render();\r\n\r\n    /* Set our lastTime variable which is used to determine the time delta\r\n     * for the next time this function is called.\r\n     */\r\n    lastTime = now;\r\n    // console.log(dt)\r\n    /* Use the browser's requestAnimationFrame function to call this\r\n     * function again as soon as the browser is able to draw another frame.\r\n     */\r\n    win.requestAnimationFrame(main);\r\n}\r\n\r\n/* This function does some initial setup that should only occur once,\r\n * particularly setting the lastTime variable that is required for the\r\n * game loop.\r\n */\r\nfunction init() {\r\n    reset();\r\n    lastTime = Date.now();\r\n    main();\r\n}\r\n\r\n/* This function is called by main (our game loop) and itself calls all\r\n * of the functions which may need to update entity's data. Based on how\r\n * you implement your collision detection (when two entities occupy the\r\n * same space, for instance when your character should die), you may find\r\n * the need to add an additional function call here. For now, we've left\r\n * it commented out - you may or may not want to implement this\r\n * functionality this way (you could just implement collision detection\r\n * on the entities themselves within your app.js file).\r\n */\r\nfunction update(dt) {\r\n    // updateEntities(dt);\r\n    // checkCollisions();\r\n}\r\n\r\n/* This is called by the update function and loops through all of the\r\n * objects within your allEnemies array as defined in app.js and calls\r\n * their update() methods. It will then call the update function for your\r\n * player object. These update methods should focus purely on updating\r\n * the data/properties related to the object. Do your drawing in your\r\n * render methods.\r\n */\r\nfunction updateEntities(dt) {\r\n    allEnemies.forEach(function(enemy) {\r\n        enemy.update(dt);\r\n    });\r\n    player.update();\r\n}\r\n\r\n/* This function initially draws the \"game level\", it will then call\r\n * the renderEntities function. Remember, this function is called every\r\n * game tick (or loop of the game engine) because that's how games work -\r\n * they are flipbooks creating the illusion of animation but in reality\r\n * they are just drawing the entire screen over and over.\r\n */\r\nfunction render() {\r\n    /* This array holds the relative URL to the image used\r\n     * for that particular row of the game level.\r\n     */\r\n    var rowImages = [\r\n            'images/water-block.png', // Top row is water\r\n            'images/stone-block.png', // Row 1 of 3 of stone\r\n            'images/stone-block.png', // Row 2 of 3 of stone\r\n            'images/stone-block.png', // Row 3 of 3 of stone\r\n            'images/grass-block.png', // Row 1 of 2 of grass\r\n            'images/grass-block.png' // Row 2 of 2 of grass\r\n        ],\r\n        numRows = 6,\r\n        numCols = 5,\r\n        row, col;\r\n\r\n    // Before drawing, clear existing canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    /* Loop through the number of rows and columns we've defined above\r\n     * and, using the rowImages array, draw the correct image for that\r\n     * portion of the \"grid\"\r\n     */\r\n    for (row = 0; row < numRows; row++) {\r\n        for (col = 0; col < numCols; col++) {\r\n            /* The drawImage function of the canvas' context element\r\n             * requires 3 parameters: the image to draw, the x coordinate\r\n             * to start drawing and the y coordinate to start drawing.\r\n             * We're using our Resources helpers to refer to our images\r\n             * so that we get the benefits of caching these images, since\r\n             * we're using them over and over.\r\n             */\r\n             if(row === 6){\r\n                debugger;\r\n             }\r\n            ctx.drawImage(Resources.get(rowImages[row]), col * 101, row * 83);\r\n        }\r\n    }\r\n\r\n    // renderEntities();\r\n}\r\n\r\n/* This function is called by the render function and is called on each game\r\n * tick. Its purpose is to then call the render functions you have defined\r\n * on your enemy and player entities within app.js\r\n */\r\nfunction renderEntities() {\r\n    /* Loop through all of the objects within the allEnemies array and call\r\n     * the render function you have defined.\r\n     */\r\n    allEnemies.forEach(function(enemy) {\r\n        enemy.render();\r\n    });\r\n\r\n    player.render();\r\n}\r\n\r\n/* This function does nothing but it could have been a good place to\r\n * handle game reset states - maybe a new game menu or a game over screen\r\n * those sorts of things. It's only called once by the init() method.\r\n */\r\nfunction reset() {\r\n    // noop\r\n}\r\n\r\n/* Go ahead and load all of the images we know we're going to need to\r\n * draw our game level. Then set init as the callback method, so that when\r\n * all of these images are properly loaded our game will start.\r\n */\r\nResources.load([\r\n    // Map sources\r\n    'images/stone-block.png',\r\n    'images/water-block.png',\r\n    'images/grass-block.png',\r\n    // Enemy source\r\n    'images/enemy-bug.png',\r\n    // Bonuses sources\r\n    'images/Gem_Blue.png',\r\n    'images/Gem_Green.png',\r\n    'images/Gem_Orange.png',\r\n    // Player sources\r\n    'images/char-boy.png',\r\n    'images/char-cat-girl.png',\r\n    'images/char-horn-girl.png',\r\n    'images/char-pink-girl.png',\r\n    'images/char-princess-girl.png'\r\n]);\r\n// Resources.onReady(init);\r\nResources.onReady(modalActions.addPlayersToModalStart);\r\n\r\n/* Assign the canvas' context object to the global variable (the window\r\n * object when run in a browser) so that developers can use it more easily\r\n * from within their app.js files.\r\n */\r\nwindow.ctx = ctx;\r\n\r\nmodule.exports = {\r\n    initGame: init,\r\n    resetGame: reset\r\n};\n},{\"./resources.js\":4,\"./startGame.js\":5}],3:[function(require,module,exports){\nconst initGame = require('./engine.js').initGame,\r\n    closeModalStart = require('./startGame.js').closeModalStart,\r\n    choosePlayer = require('./startGame.js').choosePlayer,\r\n    player = require('./app.js').player,\r\n    init = require('./engine.js');\r\n\r\nvar startPlayButton = document.querySelectorAll('.modalStart__button')[0];\r\nchoosePlayerEl = document.querySelectorAll('#modalPlayers')[0];\r\n\r\n\r\n// This listner for choosing player body. It sets choosen image \r\n// for player and set player property playerActive to true.\r\nchoosePlayerEl.addEventListener('click', function(e) {\r\n    choosePlayer(e);\r\n    player.activePlayer();\r\n});\r\n\r\n// This listens for buton start game\r\nstartPlayButton.addEventListener('click', function(e) {\r\n    if (player.getPlayerActivity()) {\r\n        closeModalStart();\r\n        initGame();\r\n    }\r\n});\r\n\r\n// This listens for key presses and sends the keys to your\r\n// Player.handleInput() method. You don't need to modify this.\r\ndocument.addEventListener('keyup', function(e) {\r\n    var allowedKeys = {\r\n        37: 'left',\r\n        38: 'up',\r\n        39: 'right',\r\n        40: 'down'\r\n    };\r\n\r\n    player.handleInput(allowedKeys[e.keyCode]);\r\n});\n},{\"./app.js\":1,\"./engine.js\":2,\"./startGame.js\":5}],4:[function(require,module,exports){\n/* Resources.js\r\n * This is simply an image loading utility. It eases the process of loading\r\n * image files so that they can be used within your game. It also includes\r\n * a simple \"caching\" layer so it will reuse cached images if you attempt\r\n * to load the same image multiple times.\r\n */\r\nvar Resources = (function() {\r\n    var resourceCache = {};\r\n    var readyCallbacks = [];\r\n\r\n    /* This is the publicly accessible image loading function. It accepts\r\n     * an array of strings pointing to image files or a string for a single\r\n     * image. It will then call our private image loading function accordingly.\r\n     */\r\n    function load(urlOrArr) {\r\n        if(urlOrArr instanceof Array) {\r\n            /* If the developer passed in an array of images\r\n             * loop through each value and call our image\r\n             * loader on that image file\r\n             */\r\n            urlOrArr.forEach(function(url) {\r\n                _load(url);\r\n            });\r\n        } else {\r\n            /* The developer did not pass an array to this function,\r\n             * assume the value is a string and call our image loader\r\n             * directly.\r\n             */\r\n            _load(urlOrArr);\r\n        }\r\n    }\r\n\r\n    /* This is our private image loader function, it is\r\n     * called by the public image loader function.\r\n     */\r\n    function _load(url) {\r\n        if(resourceCache[url]) {\r\n            /* If this URL has been previously loaded it will exist within\r\n             * our resourceCache array. Just return that image rather than\r\n             * re-loading the image.\r\n             */\r\n            return resourceCache[url];\r\n        } else {\r\n            /* This URL has not been previously loaded and is not present\r\n             * within our cache; we'll need to load this image.\r\n             */\r\n            var img = new Image();\r\n            img.onload = function() {\r\n                /* Once our image has properly loaded, add it to our cache\r\n                 * so that we can simply return this image if the developer\r\n                 * attempts to load this file in the future.\r\n                 */\r\n                resourceCache[url] = img;\r\n\r\n                /* Once the image is actually loaded and properly cached,\r\n                 * call all of the onReady() callbacks we have defined.\r\n                 */\r\n                if(isReady()) {\r\n                    readyCallbacks.forEach(function(func) { \r\n                        func.call(); \r\n                    });\r\n                }\r\n            };\r\n\r\n            /* Set the initial cache value to false, this will change when\r\n             * the image's onload event handler is called. Finally, point\r\n             * the image's src attribute to the passed in URL.\r\n             */\r\n            resourceCache[url] = false;\r\n            img.src = url;\r\n        }\r\n    }\r\n\r\n    /* This is used by developers to grab references to images they know\r\n     * have been previously loaded. If an image is cached, this functions\r\n     * the same as calling load() on that URL.\r\n     */\r\n    function get(url) {\r\n        return resourceCache[url];\r\n    }\r\n\r\n    /* This function determines if all of the images that have been requested\r\n     * for loading have in fact been properly loaded.\r\n     */\r\n    function isReady() {\r\n        var ready = true;\r\n        for(var k in resourceCache) {\r\n            if(resourceCache.hasOwnProperty(k) &&\r\n               !resourceCache[k]) {\r\n                ready = false;\r\n            }\r\n        }\r\n        return ready;\r\n    }\r\n\r\n    /* This function will add a function to the callback stack that is called\r\n     * when all requested images are properly loaded.\r\n     */\r\n    function onReady(func) {\r\n        readyCallbacks.push(func);\r\n    }\r\n\r\n    /* This object defines the publicly accessible functions available to\r\n     * developers by creating a global Resources object.\r\n     */\r\n    return {\r\n        load: load,\r\n        get: get,\r\n        onReady: onReady,\r\n        isReady: isReady\r\n    };\r\n})();\r\n\r\nmodule.exports = Resources;\r\n\n},{}],5:[function(require,module,exports){\nconst Resources = require('./resources.js'),\r\n    utils = require('./utils/utils.js'),\r\n    player = require('./app.js').player;\r\n\r\nvar allPlayers = [\r\n        // Player sources\r\n        'images/char-boy.png',\r\n        'images/char-cat-girl.png',\r\n        'images/char-horn-girl.png',\r\n        'images/char-pink-girl.png',\r\n        'images/char-princess-girl.png'\r\n    ],\r\n    allKeysForPlayers = [\r\n        'Boy',\r\n        'Cat',\r\n        'Horn',\r\n        'Pink',\r\n        'Princess'\r\n    ],\r\n    modalWindow = document.querySelectorAll('.modalStart')[0];\r\n\r\nfunction addPlayersToModalStart() {\r\n    var modalPlayers = document.getElementById('modalPlayers'),\r\n        playerContainer, player, i, j, len, lenJ;\r\n\r\n    for (i = 0, len = allPlayers.length; i < len; i++) {\r\n        player = Resources.get(allPlayers[i]);\r\n        playerContainer = document.createElement('div');\r\n        playerContainerText = document.createElement('span');\r\n        playerContainer.className = 'playerContainer';\r\n\r\n        for (j = 0, lenJ = allKeysForPlayers.length; j < lenJ; j++) {\r\n            if (allPlayers[i].indexOf(allKeysForPlayers[j].toLowerCase()) > -1) {\r\n                player.dataset.bodyType = allKeysForPlayers[j];\r\n                playerContainerText.textContent = allKeysForPlayers[j];\r\n                playerContainer.appendChild(player);\r\n                playerContainer.appendChild(playerContainerText);\r\n            }\r\n        }\r\n\r\n        modalPlayers.appendChild(playerContainer);\r\n    }\r\n}\r\n\r\nfunction choosePlayer(e) {\r\n    var playerData = e.target.dataset,\r\n        i, len;\r\n\r\n    console.log(playerData);\r\n\r\n    for (i = 0, len = allPlayers.length; i < len; i++) {\r\n        if (allPlayers[i].indexOf(playerData.bodyType.toLowerCase()) > -1) {\r\n            console.log(Resources.get(allPlayers[i]));\r\n            player.setPlayer(Resources.get(allPlayers[i]));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction closeModalStart() {\r\n    utils.toggleClass(modalWindow, 'active');\r\n}\r\n\r\n\r\n\r\n// document.addEventListener('click', function(e) {\r\n// });\r\n\r\nmodule.exports = {\r\n    addPlayersToModalStart: addPlayersToModalStart,\r\n    closeModalStart: closeModalStart,\r\n    choosePlayer: choosePlayer\r\n};\n},{\"./app.js\":1,\"./resources.js\":4,\"./utils/utils.js\":6}],6:[function(require,module,exports){\n/**\r\n * @description Toggle given class using cross browser property ClassName.\r\n * @param {Object} element DOMElement to toggle class.\r\n * @param {String} className Class name that should be toggled.\r\n */\r\n// toggleClass function from https://stackoverflow.com/questions/18880890/how-do-i-toggle-an-elements-class-in-pure-javascript\r\nfunction toggleClass(element, className) {\r\n    if (!element || !className) {\r\n        return;\r\n    }\r\n\r\n    var classString = element.className,\r\n        nameIndex = classString.indexOf(className);\r\n    if (nameIndex == -1) {\r\n        classString += ' ' + className;\r\n    } else {\r\n        classString = classString.substr(0, nameIndex) + classString.substr(nameIndex + className.length);\r\n    }\r\n    element.className = classString;\r\n}\r\n\r\nmodule.exports = {\r\n    toggleClass: toggleClass\r\n};\n},{}]},{},[1,2,3,4,5,6])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}